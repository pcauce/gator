// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows(id, created_at, updated_at, user_id, feed_id)
        VALUES ($1, $2, $3 ,$4, $5)
        RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feed_follow
         INNER JOIN users on inserted_feed_follow.user_id = users.id
         INNER JOIN feeds on inserted_feed_follow.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedsFollowedByUser = `-- name: GetFeedsFollowedByUser :many
WITH inserted_feeds AS (
    SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows
    WHERE user_id = (
        SELECT id FROM users
        WHERE users.name = $1
    )
)
SELECT
    inserted_feeds.id, inserted_feeds.created_at, inserted_feeds.updated_at, inserted_feeds.user_id, inserted_feeds.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feeds
         INNER JOIN users on inserted_feeds.user_id = users.id
         INNER JOIN feeds on inserted_feeds.feed_id = feeds.id
`

type GetFeedsFollowedByUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	FeedName  string
	UserName  string
}

func (q *Queries) GetFeedsFollowedByUser(ctx context.Context, name string) ([]GetFeedsFollowedByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsFollowedByUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsFollowedByUserRow
	for rows.Next() {
		var i GetFeedsFollowedByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM feed_follows
WHERE feed_id = (
    SELECT id FROM feeds
    WHERE feeds.user_id = $1
)
`

func (q *Queries) Unfollow(ctx context.Context, userID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, unfollow, userID)
	return err
}
